{"version":3,"sources":["assets/images/Home/hero-graphic.svg","assets/images/Home/waves.png","serviceWorker.ts","store/reducers/questions/types.ts","store/reducers/questions/index.ts","store/index.ts","components/shared/Container/Container.tsx","components/shared/Text/Text.tsx","components/Header/Header.tsx","components/shared/Button/Button.tsx","theme.ts","utils/style.utils.ts","components/shared/Grid/Grid.tsx","hooks/useDebounce.tsx","hooks/useEventListener.tsx","hooks/useHeaderHeight.tsx","pages/Home/Home.tsx","store/reducers/questions/actions.ts","hooks/useWindowSize.tsx","components/shared/PageWrapper/PageWrapper.tsx","components/shared/RadioButton/RadioButton.tsx","pages/Quiz/Quiz.tsx","pages/Result/Chart.tsx","pages/Result/Result.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","QuestionsActionTypes","initialQuestions","map","i","value","question","options","isActive","initialState","data","questionsReducer","state","type","payload","SELECT_QUESTION","questionIndex","findIndex","q","viewed","SELECT_OPTION","selectedOption","option","cur","rest","selected","SUBMIT_QUIZ","rootReducer","combineReducers","questions","Container","memo","forwardRef","ref","children","otherProps","css","propStyleMapper","size","weight","variant","lineHeight","letterSpacing","align","theme","useTheme","colors","props","to","Button","as","ButtonComponent","shape","primary","secondary","default","dark","light","devices","sizes","md","lg","getMediaQueries","Object","entries","reduce","acc","stylePropMapper","propName","prop","callbackFn","defaultValue","propObj","Array","isArray","slice","length","key","getMediaSupportedProp","defaultProvided","keys","filter","Grid","columns","offset","height","order","container","direction","justifyContent","alignItems","alignContent","Wrapper","Fragment","heightStyle","wrapperProps","useDebounce","fn","duration","trailing","leading","timerIdRef","useRef","updateDebounced","useCallback","setTimerId","current","args","timerId","clearTimeout","updatedTimerId","setTimeout","debounced","useEffect","useEventListener","eventType","listener","element","savedHandler","addEventListener","removeEventListener","useHeaderHeight","useState","setHeight","header","document","querySelector","offsetHeight","debouncedListener","useLayoutEffect","Contents","alt","src","wavesBg","width","Link","illustration","headerHeight","selectQuestion","selectOption","useWindowSize","deviceType","windowSize","setWindowSize","onWindowSizeChanged","innerHeight","innerWidth","PageWrapper","isLargeWindow","RadioButton","className","onClick","e","currentTarget","firstChild","checked","useSelector","dispatch","useDispatch","activeQuestionIndex","activeQuestion","isLastQuestionActive","buttonProps","find","onChange","Chart","results","label","correct","incorrect","unanswered","questionType","values","name","color","dataKey","nameKey","cx","cy","innerRadius","outerRadius","hideColor","fill","Result","windowWidth","getResultData","hide","Math","min","round","LegendRow","title","toUpperCase","substr","mapTypeToFields","Routes","path","exact","component","Home","Quiz","App","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d73a92d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero-graphic.72d7f9b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/waves.6d6637b9.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Action } from \"redux\";\r\nimport { Option } from \"../../../models/Question\";\r\nimport QuestionUI from \"../../../models/QuestionUIState\";\r\n\r\nexport type QuestionsState = {\r\n  data: QuestionUI[];\r\n};\r\n\r\nexport enum QuestionsActionTypes {\r\n  SELECT_QUESTION = \"SELECT_QUESTION\",\r\n  SELECT_OPTION = \"SELECT_OPTION\",\r\n  SUBMIT_QUIZ = \"SUBMIT_QUIZ\",\r\n}\r\n\r\ntype SelectQuestionAction = {\r\n  readonly type: typeof QuestionsActionTypes.SELECT_QUESTION;\r\n  readonly payload: {\r\n    question: QuestionUI;\r\n  };\r\n};\r\n\r\ntype SelectOptionAction = {\r\n  readonly type: typeof QuestionsActionTypes.SELECT_OPTION;\r\n  readonly payload: {\r\n    option: Option;\r\n  };\r\n};\r\n\r\ntype SubmitQuizAction = {\r\n  readonly type: typeof QuestionsActionTypes.SUBMIT_QUIZ;\r\n};\r\n\r\nexport type QuestionsActions =\r\n  | SelectQuestionAction\r\n  | SelectOptionAction\r\n  | SubmitQuizAction;\r\n","import { Option, Options } from \"../../../models/Question\";\r\nimport {\r\n  QuestionsActionTypes,\r\n  QuestionsActions,\r\n  QuestionsState,\r\n} from \"./types\";\r\n\r\nimport QuestionUI from \"../../../models/QuestionUIState\";\r\nimport { Reducer } from \"redux\";\r\nimport questionsData from \"../../../data/quiz.json\";\r\n\r\nlet initialQuestions = questionsData.map<QuestionUI>(\r\n  ({ question, options }, i) => ({\r\n    value: question,\r\n    options: options.map(value => ({ value })) as Options,\r\n    isActive: i === 0,\r\n  }),\r\n);\r\nconst initialState = { data: initialQuestions };\r\n\r\nconst questionsReducer: Reducer<QuestionsState, QuestionsActions> = (\r\n  state = initialState,\r\n  { type, payload },\r\n) => {\r\n  switch (type) {\r\n    case QuestionsActionTypes.SELECT_QUESTION: {\r\n      const { question } = payload!;\r\n\r\n      const questionIndex = state.data.findIndex(\r\n        q => q.value === question.value,\r\n      );\r\n      return {\r\n        ...state,\r\n\r\n        data: state.data.map((q, i) => ({\r\n          ...q,\r\n          viewed: q.viewed || i <= questionIndex,\r\n          isActive: i === questionIndex,\r\n        })),\r\n      };\r\n    }\r\n\r\n    case QuestionsActionTypes.SELECT_OPTION: {\r\n      const { value: selectedOption } = payload.option;\r\n\r\n      return {\r\n        ...state,\r\n        data: state.data.map(cur =>\r\n          !cur.isActive\r\n            ? cur\r\n            : {\r\n                ...cur,\r\n                options: cur.options.map(({ value, ...rest }) => ({\r\n                  ...rest,\r\n                  value,\r\n                  selected: value === selectedOption,\r\n                })),\r\n              },\r\n        ),\r\n      };\r\n    }\r\n\r\n    case QuestionsActionTypes.SUBMIT_QUIZ:\r\n      return {\r\n        ...state,\r\n        data: initialQuestions,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default questionsReducer;\r\n","import { QuestionsActions } from \"./reducers/questions/types\";\r\nimport { combineReducers } from \"redux\";\r\nimport questionsReducer from \"./reducers/questions\";\r\n\r\nexport const rootReducer = combineReducers({ questions: questionsReducer });\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type RootActions = QuestionsActions;\r\n","import { DetailedHTMLProps, HTMLAttributes, forwardRef, memo } from \"react\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\ninterface ContainerProps\r\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Container = memo(\r\n  forwardRef<HTMLDivElement, ContainerProps>(\r\n    ({ children, ...otherProps }, ref) => {\r\n      return (\r\n        <div\r\n          css={css`\r\n            margin: 0 auto;\r\n            width: 90%;\r\n            max-width: 1150px;\r\n          `}\r\n          ref={ref}\r\n          {...otherProps}\r\n        >\r\n          {children}\r\n        </div>\r\n      );\r\n    },\r\n  ),\r\n);\r\nexport default Container;\r\n","import { DetailedHTMLProps, HTMLAttributes, memo } from \"react\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport { Theme } from \"../../../theme\";\r\nimport { useTheme } from \"emotion-theming\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\nconst propStyleMapper: any = {\r\n  getSize: (size: number) => {\r\n    return [0.8, 1, 1.25, 1.5, 2, 2.5][size - 1];\r\n  },\r\n};\r\n\r\ninterface TextProps\r\n  extends DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {\r\n  size?: 1 | 2 | 3 | 4 | 5 | 6;\r\n  children?: React.ReactNode;\r\n  variant?: \"primary\" | \"secondary\" | \"default\" | \"dark\" | \"light\";\r\n  align?: \"left\" | \"center\" | \"right\";\r\n  weight?: string | number;\r\n  lineHeight?: number | string;\r\n  letterSpacing?: number | string;\r\n}\r\nexport default memo(function Text({\r\n  size = 2,\r\n  weight = \"normal\",\r\n  variant = \"default\",\r\n  children = null,\r\n  lineHeight,\r\n  letterSpacing,\r\n  align = \"left\",\r\n  ...rest\r\n}: TextProps) {\r\n  const theme = useTheme<Theme>();\r\n\r\n  // const alignObj = getMediaSupportedProp(align);\r\n\r\n  return (\r\n    <span\r\n      css={css`\r\n        font-size: ${propStyleMapper.getSize(size)}rem;\r\n        font-weight: ${weight !== \"normal\" && weight};\r\n        color: ${variant && theme.colors[variant]};\r\n        line-height: ${lineHeight};\r\n        letter-spacing: ${letterSpacing};\r\n        text-align: ${align !== \"left\" && align};\r\n      `}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </span>\r\n  );\r\n});\r\n","import \"./Header.scss\";\r\n\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Container from \"./../shared/Container/Container\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Text from \"./../shared/Text/Text\";\r\nimport { memo } from \"react\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\ninterface HeaderProps {}\r\nexport default memo(function Header(props: HeaderProps) {\r\n  return (\r\n    <header\r\n      css={css`\r\n        padding: 2em 0;\r\n      `}\r\n    >\r\n      <Container>\r\n        <Link to=\"/\">\r\n          <Text size={4} weight=\"700\" variant=\"primary\">\r\n            Quizza\r\n          </Text>\r\n        </Link>\r\n      </Container>\r\n    </header>\r\n  );\r\n});\r\n","import { ComponentProps, ElementType, forwardRef, memo } from \"react\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Text from \"../Text/Text\";\r\nimport { Theme } from \"../../../theme\";\r\nimport { useTheme } from \"emotion-theming\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\ntype ButtonProps<T extends ElementType> = ComponentProps<T> & {\r\n  as?: T;\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n  variant?: \"primary\" | \"secondary\" | \"default\" | \"outline\";\r\n  shape?: \"default\" | \"ellipse\";\r\n  children?: React.ReactNode;\r\n};\r\nconst Button = <T extends ElementType<any> = \"button\">({\r\n  as: ButtonComponent = \"button\",\r\n  size = \"medium\",\r\n  variant = \"primary\",\r\n  children = null,\r\n  shape = \"default\",\r\n  ...otherProps\r\n}: ButtonProps<T>) => {\r\n  const theme = useTheme<Theme>();\r\n\r\n  return (\r\n    <ButtonComponent\r\n      css={css`\r\n        padding: ${shape === \"default\" ? \"0.8\" : \"1.9\"}rem 1.9rem;\r\n        border-radius: 7px;\r\n        border: 5px solid\r\n          ${variant === \"outline\" ? theme.colors.primary : \"transparent\"};\r\n\r\n        background-color: ${variant === \"outline\"\r\n          ? \"transparent\"\r\n          : theme.colors[variant]};\r\n        box-shadow: ${variant === \"primary\" &&\r\n          \"2px 5px 5px rgba(0, 0, 0, 0.25)\"};\r\n      `}\r\n      {...otherProps}\r\n    >\r\n      <Text\r\n        size={2}\r\n        css={css`\r\n          text-transform: uppercase;\r\n          color: ${variant !== \"outline\" ? \"white\" : theme.colors.primary};\r\n        `}\r\n        weight=\"bold\"\r\n      >\r\n        {children}\r\n      </Text>\r\n    </ButtonComponent>\r\n  );\r\n};\r\nexport default Button;\r\n","export type DeviceTypes = \"default\" | \"md\" | \"lg\";\r\nexport interface DeviceSizes {\r\n  default: number | string;\r\n  md?: number | string;\r\n  lg?: number | string;\r\n}\r\nexport interface Theme {\r\n  colors: {\r\n    [k: string]: string;\r\n  };\r\n  devices: {\r\n    sizes: DeviceSizes;\r\n  };\r\n}\r\nconst theme: Theme = {\r\n  colors: {\r\n    primary: \"#02DA99\",\r\n    secondary: \"#FF6584\",\r\n    default: \"#727272\",\r\n    dark: \"#303735\",\r\n    light: \"#F1F1F1\",\r\n  },\r\n  devices: {\r\n    sizes: {\r\n      default: 0,\r\n      md: 601,\r\n      lg: 993,\r\n    },\r\n  },\r\n};\r\nexport default theme;\r\n","import theme, { DeviceSizes } from \"../theme\";\r\n\r\nexport type MediaQueries = {\r\n  [size in keyof DeviceSizes]: string;\r\n};\r\nexport const getMediaQueries = (): MediaQueries => {\r\n  return Object.entries(theme.devices.sizes).reduce(\r\n    (acc, [type, size], i) => ({\r\n      ...acc,\r\n      [type]: `@media (min-width: ${size}px)`,\r\n    }),\r\n    {} as MediaQueries,\r\n  );\r\n};\r\nexport interface MediaSupportedPropObj extends DeviceSizes {}\r\nexport type MediaSupportedProp<T> = T | Array<T> | MediaSupportedPropObj;\r\nexport const getMediaSupportedProp = <T>(\r\n  prop: MediaSupportedProp<T>,\r\n): MediaSupportedPropObj => {\r\n  switch (typeof prop) {\r\n    case \"string\":\r\n    case \"number\":\r\n      return { default: prop } as MediaSupportedPropObj;\r\n\r\n    case \"object\":\r\n      if (Array.isArray(prop)) {\r\n        return [\"default\", \"md\", \"lg\"]\r\n          .slice(0, prop.length)\r\n          .reduce(\r\n            (acc, key, i) => ({ ...acc, [key]: prop[i] }),\r\n            {} as MediaSupportedPropObj,\r\n          );\r\n      } else {\r\n        return prop as MediaSupportedPropObj;\r\n      }\r\n\r\n    default:\r\n      return {} as MediaSupportedPropObj;\r\n  }\r\n};\r\n","import {\r\n  DetailedHTMLProps,\r\n  Fragment,\r\n  HTMLAttributes,\r\n  forwardRef,\r\n  memo,\r\n} from \"react\";\r\nimport {\r\n  MediaSupportedProp,\r\n  getMediaQueries,\r\n  getMediaSupportedProp,\r\n} from \"../../../utils/style.utils\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Container from \"../Container/Container\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\nconst stylePropMapper = {\r\n  getLayoutPropertyCss: (\r\n    propName: string,\r\n    prop: MediaSupportedProp<any>,\r\n    callbackFn: (value: string | number) => string | number,\r\n    defaultValue: string | number,\r\n  ): string => {\r\n    const propObj = getMediaSupportedProp(prop);\r\n\r\n    const defaultProvided = propObj.default;\r\n\r\n    if (Object.keys(propObj).length === 1 && defaultProvided === defaultValue) {\r\n      return \"\";\r\n    }\r\n\r\n    return `\r\n      ${propName}: ${callbackFn(propObj.default)};\r\n      ${Object.entries(propObj)\r\n        .filter(([key]) => key !== \"default\")\r\n        .reduce(\r\n          (acc, [key, value]) => `\r\n            ${acc}\r\n            ${getMediaQueries()[key]} {\r\n              ${propName}: ${callbackFn(value)};\r\n            }`,\r\n          \"\",\r\n        )}\r\n    `;\r\n  },\r\n};\r\n\r\ntype ColumnValues = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\r\ntype LayoutSizes = ColumnValues | \"auto\";\r\nexport interface GridProps\r\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\r\n  container?: boolean;\r\n  columns?: MediaSupportedProp<LayoutSizes>;\r\n  offset?: MediaSupportedProp<LayoutSizes>;\r\n  height?: string | number;\r\n\r\n  order?: MediaSupportedProp<ColumnValues>;\r\n  children?: React.ReactNode;\r\n  direction?: \"column\" | \"row\" | \"row-reverse\" | \"column-reverse\";\r\n  justifyContent?:\r\n    | \"center\"\r\n    | \"flex-start\"\r\n    | \"flex-end\"\r\n    | \"space-between\"\r\n    | \"space-around\"\r\n    | \"space-evenly\";\r\n  alignItems?: \"center\" | \"flex-start\" | \"flex-end\" | \"stretch\";\r\n  alignContent?: \"center\" | \"flex-start\" | \"flex-end\";\r\n}\r\n\r\nconst Grid = memo(\r\n  forwardRef<HTMLDivElement, GridProps>(\r\n    (\r\n      {\r\n        columns = 12,\r\n        offset = 0,\r\n        height = \"auto\",\r\n        order = 0,\r\n        container = false,\r\n        children = null,\r\n        direction = \"row\",\r\n        justifyContent = \"flex-start\",\r\n        alignItems = \"flex-start\",\r\n        alignContent = \"flex-start\",\r\n        ...otherProps\r\n      },\r\n      ref,\r\n    ) => {\r\n      const Wrapper = container ? Container : Fragment;\r\n\r\n      // const refProp = { ref };\r\n      const heightStyle = css`\r\n        height: ${typeof height === \"number\" ? `${height}px` : height};\r\n      `;\r\n      const wrapperProps = container\r\n        ? {\r\n            css: heightStyle,\r\n            // ...refProp\r\n          }\r\n        : {};\r\n\r\n      // const childProps = container ? {} : { ...refProp };\r\n\r\n      return (\r\n        <Wrapper {...wrapperProps}>\r\n          <div\r\n            css={css`\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            flex-direction: ${direction !== \"row\" && direction};\r\n            justify-content: ${justifyContent !== \"flex-start\" &&\r\n              justifyContent};\r\n            align-items: ${alignItems !== \"flex-start\" && alignItems};\r\n            align-content: ${alignContent !== \"flex-start\" && alignContent};\r\n            ${stylePropMapper.getLayoutPropertyCss(\r\n              \"order\",\r\n              order,\r\n              value => value,\r\n              0,\r\n            )}\r\n\r\n            ${heightStyle}\r\n            ${stylePropMapper.getLayoutPropertyCss(\r\n              \"width\",\r\n              columns,\r\n              value =>\r\n                value !== \"auto\"\r\n                  ? `\r\n                    ${(+value / 12) * 100}%;\r\n                    display: ${+value === 0 ? \"none\" : \"flex\"};`\r\n                  : \"auto\",\r\n              \"auto\",\r\n            )}\r\n            ${stylePropMapper.getLayoutPropertyCss(\r\n              \"margin-left\",\r\n              offset,\r\n              value => (value !== \"auto\" ? `${(+value / 12) * 100}%` : \"auto\"),\r\n              0,\r\n            )}\r\n          `}\r\n            ref={ref}\r\n            {...otherProps}\r\n          >\r\n            {children}\r\n          </div>\r\n        </Wrapper>\r\n      );\r\n    },\r\n  ),\r\n);\r\nexport default Grid;\r\n","import { MutableRefObject, useCallback, useEffect, useRef } from \"react\";\r\n\r\ntype useDebounceHook = <T extends (...args: any[]) => void>(\r\n  fn: T,\r\n  duration: number,\r\n  options?: { trailing?: boolean; leading?: boolean },\r\n) => T;\r\n\r\nconst useDebounce: useDebounceHook = (\r\n  fn,\r\n  duration,\r\n  options = { trailing: true },\r\n) => {\r\n  const { trailing = true, leading = false } = options;\r\n\r\n  type TimerId = NodeJS.Timeout | null;\r\n  const timerIdRef = useRef<TimerId>(null);\r\n\r\n  const updateDebounced = useCallback(() => {\r\n    const setTimerId = (value: TimerId) => {\r\n      (timerIdRef as MutableRefObject<typeof value>).current = value;\r\n    };\r\n\r\n    return ((...args) => {\r\n      const { current: timerId } = timerIdRef;\r\n      if (timerId === null && leading) fn(...args);\r\n\r\n      if (timerId !== null) clearTimeout(timerId);\r\n\r\n      const updatedTimerId = setTimeout(() => {\r\n        if (trailing) fn(...args);\r\n\r\n        setTimerId(null);\r\n      }, duration);\r\n\r\n      setTimerId(updatedTimerId);\r\n    }) as typeof fn;\r\n  }, [fn, leading, duration, trailing]);\r\n\r\n  const debounced = useRef(updateDebounced());\r\n\r\n  useEffect(() => {\r\n    updateDebounced();\r\n\r\n    return () => {\r\n      const { current: timerId } = timerIdRef;\r\n      if (timerId !== null) clearTimeout(timerId);\r\n    };\r\n  }, [fn, duration, trailing, updateDebounced]);\r\n\r\n  return debounced.current;\r\n};\r\nexport default useDebounce;\r\n","import { MutableRefObject, useEffect, useRef } from \"react\";\r\n\r\nfunction useEventListener<KD extends keyof DocumentEventMap>(\r\n  eventType: KD,\r\n  listener: (this: Document, evt: DocumentEventMap[KD]) => void,\r\n  element: Document,\r\n  options?: boolean | AddEventListenerOptions,\r\n): void;\r\nfunction useEventListener<KH extends keyof HTMLElementEventMap>(\r\n  eventType: KH,\r\n  listener: (this: HTMLElement, evt: HTMLElementEventMap[KH]) => void,\r\n  element: HTMLElement,\r\n  options?: boolean | AddEventListenerOptions,\r\n): void;\r\nfunction useEventListener<KW extends keyof WindowEventMap>(\r\n  eventType: KW,\r\n  listener: (this: Window, evt: WindowEventMap[KW]) => void,\r\n  element?: Window,\r\n  options?: boolean | AddEventListenerOptions,\r\n): void;\r\nfunction useEventListener(\r\n  eventType: string,\r\n  listener: (evt: Event) => void,\r\n  element: Document | HTMLElement | Window,\r\n  options?: boolean | AddEventListenerOptions,\r\n): void;\r\n\r\nfunction useEventListener<\r\n  KD extends keyof DocumentEventMap,\r\n  KH extends keyof HTMLElementEventMap,\r\n  KW extends keyof WindowEventMap\r\n>(\r\n  eventType: KD | KH | KW | string,\r\n  listener: (\r\n    this: Document | HTMLElement | Window,\r\n    evt:\r\n      | DocumentEventMap[KD]\r\n      | HTMLElementEventMap[KH]\r\n      | WindowEventMap[KW]\r\n      | Event,\r\n  ) => void,\r\n  element: Document | HTMLElement | Window = window,\r\n  options?: boolean | AddEventListenerOptions,\r\n): void {\r\n  const savedHandler = useRef(listener);\r\n\r\n  useEffect(() => {\r\n    (savedHandler as MutableRefObject<typeof listener>).current = listener;\r\n  }, [listener]);\r\n\r\n  useEffect(() => {\r\n    if (!element?.addEventListener) {\r\n      return;\r\n    }\r\n\r\n    element.addEventListener(eventType, listener);\r\n    return () => {\r\n      element.removeEventListener(eventType, listener);\r\n    };\r\n  }, [eventType, element, listener]);\r\n}\r\nexport default useEventListener;\r\n","import {\r\n  MutableRefObject,\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport useDebounce from \"./useDebounce\";\r\nimport useEventListener from \"./useEventListener\";\r\n\r\nexport default function useHeaderHeight() {\r\n  const [height, setHeight] = useState(0);\r\n  const header = useRef<HTMLElement>(null);\r\n\r\n  const listener = useCallback(() => {\r\n    if (!header.current) {\r\n      (header as MutableRefObject<\r\n        typeof header.current\r\n      >).current = document.querySelector(\"header\");\r\n    }\r\n\r\n    const height = (header.current as HTMLElement)?.offsetHeight;\r\n    setHeight(height);\r\n  }, []);\r\n  const debouncedListener = useDebounce(listener, 1000, {\r\n    trailing: true,\r\n    leading: true,\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    debouncedListener();\r\n  }, [debouncedListener]);\r\n\r\n  useEventListener(\"resize\", debouncedListener);\r\n  useEventListener(\"load\", debouncedListener);\r\n\r\n  return height;\r\n}\r\n","import \"./Home.scss\";\r\n\r\nimport { Fragment, memo } from \"react\";\r\nimport { Link, RouteComponentProps } from \"react-router-dom\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Button from \"../../components/shared/Button/Button\";\r\nimport Grid from \"../../components/shared/Grid/Grid\";\r\nimport Text from \"../../components/shared/Text/Text\";\r\nimport { getMediaQueries } from \"../../utils/style.utils\";\r\nimport illustration from \"../../assets/images/Home/hero-graphic.svg\";\r\nimport useHeaderHeight from \"../../hooks/useHeaderHeight\";\r\nimport wavesBg from \"../../assets/images/Home/waves.png\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\nconst Contents = memo(() => {\r\n  return (\r\n    <Fragment>\r\n      <img\r\n        alt=\"Background design\"\r\n        src={wavesBg}\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        css={css`\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n          z-index: -1;\r\n        `}\r\n      />\r\n      <Grid container>\r\n        <Grid\r\n          columns={[12, 7, 5]}\r\n          order={[1, 0, 0]}\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          css={css`\r\n            text-align: center;\r\n            ${getMediaQueries().md} {\r\n              align-items: flex-start;\r\n              text-align: left;\r\n            }\r\n          `}\r\n        >\r\n          <Grid columns=\"auto\">\r\n            <Text\r\n              size={6}\r\n              weight=\"bold\"\r\n              variant=\"primary\"\r\n              lineHeight=\"1.06em\"\r\n              css={css`\r\n                margin-bottom: 0.4em;\r\n                margin-top: 1em;\r\n                ${getMediaQueries().md} {\r\n                  margin-top: 0;\r\n                }\r\n              `}\r\n            >\r\n              TEST YOUR\r\n              <br />\r\n              ABILITY\r\n            </Text>\r\n          </Grid>\r\n\r\n          <Grid columns={10}>\r\n            <Text weight=\"light\" size={2}>\r\n              Take our quiz to evaluate your awareness of topics ranging from\r\n              science, politics and many more.\r\n            </Text>\r\n          </Grid>\r\n\r\n          <Grid columns=\"auto\">\r\n            <Button\r\n              as={Link}\r\n              css={css`\r\n                margin-top: 2.25em;\r\n              `}\r\n              to=\"/quiz\"\r\n            >\r\n              Start quiz\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid columns={[12, 5, 7]}>\r\n          <img\r\n            alt=\"Quiz taking graphic\"\r\n            src={illustration}\r\n            width=\"60%\"\r\n            css={css`\r\n              margin: auto;\r\n              ${getMediaQueries().md} {\r\n                width: 90%;\r\n              }\r\n            `}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n});\r\n\r\ninterface HomeProps {}\r\nexport default memo(function Home(props: RouteComponentProps<HomeProps>) {\r\n  const headerHeight = useHeaderHeight();\r\n\r\n  return (\r\n    <Grid\r\n      alignItems=\"center\"\r\n      alignContent=\"center\"\r\n      css={css`\r\n        position: relative;\r\n\r\n        min-height: 100%;\r\n        margin-top: -${headerHeight}px;\r\n      `}\r\n    >\r\n      <Contents></Contents>\r\n    </Grid>\r\n  );\r\n});\r\n","import { QuestionsActionTypes, QuestionsActions } from \"./types\";\r\n\r\nimport { Option } from \"../../../models/Question\";\r\nimport QuestionUI from \"../../../models/QuestionUIState\";\r\n\r\nexport const selectQuestion = (question: QuestionUI): QuestionsActions => ({\r\n  type: QuestionsActionTypes.SELECT_QUESTION,\r\n  payload: { question },\r\n});\r\n\r\nexport const selectOption = (option: Option): QuestionsActions => ({\r\n  type: QuestionsActionTypes.SELECT_OPTION,\r\n  payload: { option },\r\n});\r\n\r\nexport const submitQuiz = (): QuestionsActions => ({\r\n  type: QuestionsActionTypes.SUBMIT_QUIZ,\r\n});\r\n","import { DeviceSizes, DeviceTypes, Theme } from \"../theme\";\r\nimport { useLayoutEffect, useState } from \"react\";\r\n\r\nimport { useTheme } from \"emotion-theming\";\r\n\r\ntype WindowSize = { height: number; width: number; deviceType: string };\r\n\r\ntype useWindowSizeHook = () => WindowSize;\r\n\r\nconst useWindowSize: useWindowSizeHook = () => {\r\n  const [windowSize, setWindowSize] = useState<WindowSize>({\r\n    width: 0,\r\n    height: 0,\r\n    deviceType: \"default\",\r\n  });\r\n\r\n  const theme = useTheme<Theme>();\r\n\r\n  const findDeviceType = (width: number): DeviceTypes => {\r\n    if (theme.devices.sizes.md && theme.devices.sizes.md <= width) {\r\n      if (theme.devices.sizes.lg && theme.devices.sizes.lg <= width)\r\n        return \"lg\";\r\n\r\n      return \"md\";\r\n    }\r\n\r\n    return \"default\";\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const onWindowSizeChanged = () => {\r\n      setWindowSize({\r\n        height: window.innerHeight,\r\n        width: window.innerWidth,\r\n        deviceType: findDeviceType(window.innerWidth),\r\n      });\r\n    };\r\n\r\n    onWindowSizeChanged();\r\n\r\n    window.addEventListener(\"resize\", onWindowSizeChanged);\r\n    return () => window.removeEventListener(\"resize\", onWindowSizeChanged);\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\nexport default useWindowSize;\r\n","import { DetailedHTMLProps, HTMLAttributes, forwardRef } from \"react\";\r\nimport Grid, { GridProps } from \"../Grid/Grid\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport { Theme } from \"../../../theme\";\r\nimport { getMediaQueries } from \"../../../utils/style.utils\";\r\nimport useHeaderHeight from \"../../../hooks/useHeaderHeight\";\r\nimport { useTheme } from \"emotion-theming\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\ninterface PageWrapperProps extends GridProps {}\r\nconst PageWrapper = forwardRef<HTMLDivElement, PageWrapperProps>(\r\n  ({ children, ...otherProps }, ref) => {\r\n    const headerHeight = useHeaderHeight();\r\n    const windowSize = useWindowSize();\r\n    const theme = useTheme<Theme>();\r\n    const isLargeWindow =\r\n      !theme.devices.sizes.lg || windowSize.width >= theme.devices.sizes.lg;\r\n\r\n    return (\r\n      <Grid\r\n        css={css`\r\n          min-height: 100%;\r\n          margin-top: -${headerHeight}px;\r\n          padding-top: ${headerHeight}px;\r\n\r\n          background-color: ${theme.colors.light};\r\n\r\n          ${getMediaQueries().lg} {\r\n            padding-bottom: ${headerHeight / 2}px;\r\n          }\r\n        `}\r\n        ref={ref}\r\n        {...otherProps}\r\n      >\r\n        <Grid\r\n          container={isLargeWindow}\r\n          css={css`\r\n            border-radius: 0;\r\n            box-shadow: 2px 10px 15px rgba(0, 0, 0, 0.25);\r\n\r\n            background-color: white;\r\n\r\n            ${getMediaQueries().lg} {\r\n              border-radius: 25px;\r\n            }\r\n          `}\r\n        >\r\n          {children}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  },\r\n);\r\nexport default PageWrapper;\r\n","import {\r\n  DetailedHTMLProps,\r\n  Fragment,\r\n  HTMLAttributes,\r\n  InputHTMLAttributes,\r\n} from \"react\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Grid from \"../Grid/Grid\";\r\nimport { Theme } from \"../../../theme\";\r\nimport { useTheme } from \"emotion-theming\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\ninterface RadioButtonProps\r\n  extends DetailedHTMLProps<\r\n    InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement\r\n  > {}\r\nexport default function RadioButton({\r\n  className,\r\n  ...otherProps\r\n}: RadioButtonProps) {\r\n  const theme = useTheme<Theme>();\r\n\r\n  return (\r\n    <span\r\n      css={css`\r\n        display: inline-block;\r\n\r\n        position: relative;\r\n        height: 1.5rem;\r\n        width: 1.5rem;\r\n\r\n        cursor: pointer;\r\n      `}\r\n      onClick={e => {\r\n        ((e.currentTarget as HTMLSpanElement)\r\n          .firstChild as HTMLInputElement).checked = true;\r\n      }}\r\n      className={className}\r\n    >\r\n      <input\r\n        type=\"radio\"\r\n        css={css`\r\n          opacity: 0;\r\n\r\n          &:checked + span {\r\n            border-color: ${theme.colors.primary};\r\n\r\n            &::after {\r\n              content: \"\";\r\n\r\n              height: 60%;\r\n              width: 60%;\r\n              border-radius: 50%;\r\n\r\n              background-color: ${theme.colors.primary};\r\n\r\n          }\r\n        `}\r\n        {...otherProps}\r\n      ></input>\r\n      <span\r\n        css={css`\r\n          display: inline-flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n\r\n          height: 100%;\r\n          width: 100%;\r\n          border: 0.2rem solid ${theme.colors.primary};\r\n          border-radius: 50%;\r\n        `}\r\n      ></span>\r\n    </span>\r\n  );\r\n}\r\n","import Question, { Option, Options } from \"../../models/Question\";\r\nimport { Reducer, memo, useCallback, useReducer, useState } from \"react\";\r\nimport { RootActions, RootState } from \"../../store\";\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport {\r\n  selectOption,\r\n  selectQuestion,\r\n} from \"../../store/reducers/questions/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Button from \"../../components/shared/Button/Button\";\r\nimport Grid from \"../../components/shared/Grid/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PageWrapper from \"../../components/shared/PageWrapper/PageWrapper\";\r\nimport QuestionUI from \"../../models/QuestionUIState\";\r\nimport RadioButton from \"../../components/shared/RadioButton/RadioButton\";\r\nimport React from \"react\";\r\nimport Text from \"../../components/shared/Text/Text\";\r\nimport { Theme } from \"../../theme\";\r\nimport { getMediaQueries } from \"../../utils/style.utils\";\r\nimport initialQuestions from \"../../data/quiz.json\";\r\nimport questionsReducer from \"../../store/reducers/questions\";\r\nimport useHeaderHeight from \"../../hooks/useHeaderHeight\";\r\nimport { useTheme } from \"emotion-theming\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\ninterface QuizProps {}\r\nexport default memo(function Quiz({ ...otherProps }: QuizProps) {\r\n  // const [{ questions }, dispatch] = useReducer(questionsReducer, {\r\n  //   questions: initialQuestions,\r\n  // });\r\n  const questions = useSelector<RootState, QuestionUI[]>(\r\n    state => state.questions.data,\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = useTheme<Theme>();\r\n\r\n  const activeQuestionIndex = questions.findIndex(cur => cur.isActive);\r\n  const activeQuestion = questions[activeQuestionIndex];\r\n\r\n  const isLastQuestionActive = activeQuestionIndex === questions.length - 1;\r\n  const buttonProps = isLastQuestionActive ? { to: \"/result\" } : {};\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <Grid columns={[2, 1, 1]}>\r\n        {questions.map(({ value, options, viewed }, i) => (\r\n          <Grid key={value}>\r\n            <Button\r\n              variant={value === activeQuestion.value ? \"primary\" : \"outline\"}\r\n              css={css`\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n\r\n                position: relative;\r\n\r\n                width: 100%;\r\n                padding: 1.5em;\r\n                border-radius: 0;\r\n                border: 2px solid\r\n                  ${value !== activeQuestion.value\r\n                    ? theme.colors.light\r\n                    : \"transparent\"};\r\n                box-shadow: none;\r\n\r\n                ${getMediaQueries().lg} {\r\n                  border-top-left-radius: ${i === 0 && \"25px\"};\r\n                  border-bottom-left-radius: ${i === 7 && \"25px\"};\r\n                }\r\n              `}\r\n              onClick={e => dispatch(selectQuestion({ value, options }))}\r\n            >\r\n              <Text\r\n                weight=\"200\"\r\n                size={3}\r\n                variant={activeQuestion.value === value ? \"light\" : \"default\"}\r\n                css={css`\r\n                  position: relative;\r\n\r\n                  &::after {\r\n                    content: ${activeQuestionIndex !== i && viewed && \"\"};\r\n                  }\r\n                `}\r\n              >\r\n                {i + 1}\r\n              </Text>\r\n              {viewed && i !== activeQuestionIndex && (\r\n                <Text\r\n                  size={2}\r\n                  variant={\r\n                    !!options.find(({ selected }) => selected)\r\n                      ? \"primary\"\r\n                      : \"secondary\"\r\n                  }\r\n                  css={css`\r\n                    position: absolute;\r\n                    top: 50%;\r\n                    left: 50%;\r\n\r\n                    transform: translate(20%, -125%);\r\n                  `}\r\n                >\r\n                  <i\r\n                    css={css`\r\n                      font-size: inherit;\r\n                    `}\r\n                    className=\"material-icons\"\r\n                  >\r\n                    {!!options.find(({ selected }) => selected)\r\n                      ? \"check_circle\"\r\n                      : \"error\"}\r\n                  </i>\r\n                </Text>\r\n              )}\r\n            </Button>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Grid\r\n        columns={[10, 11, 11]}\r\n        css={css`\r\n          padding: 1.25em;\r\n\r\n          ${getMediaQueries().lg} {\r\n            padding: 3.5em;\r\n          }\r\n        `}\r\n        direction=\"column\"\r\n      >\r\n        <Text\r\n          size={5}\r\n          weight=\"regular\"\r\n          variant=\"dark\"\r\n          css={css`\r\n            margin-bottom: 0.5em;\r\n          `}\r\n          lineHeight=\"1.2em\"\r\n        >\r\n          {activeQuestion.value}\r\n        </Text>\r\n\r\n        <Grid\r\n          direction=\"column\"\r\n          css={css`\r\n            flex-grow: 1;\r\n          `}\r\n        >\r\n          {activeQuestion.options.map(({ value, selected, ...rest }, i) => (\r\n            <Grid\r\n              key={value}\r\n              alignItems=\"center\"\r\n              onClick={e => dispatch(selectOption({ value, ...rest }))}\r\n            >\r\n              <RadioButton\r\n                checked={!!selected}\r\n                css={css`\r\n                  margin-right: 0.75rem;\r\n                `}\r\n                onChange={e => dispatch(selectOption({ value, ...rest }))}\r\n              ></RadioButton>\r\n              <label>\r\n                <Text size={4} variant=\"dark\" lineHeight=\"2em\">\r\n                  {value}\r\n                </Text>\r\n              </label>\r\n            </Grid>\r\n          ))}\r\n\r\n          <Grid\r\n            css={css`\r\n              flex-grow: 1;\r\n            `}\r\n            justifyContent=\"flex-end\"\r\n            alignContent=\"flex-end\"\r\n          >\r\n            <Button\r\n              as={isLastQuestionActive ? Link : \"button\"}\r\n              onClick={e =>\r\n                dispatch(\r\n                  selectQuestion(\r\n                    questions[(activeQuestionIndex + 1) % questions.length],\r\n                  ),\r\n                )\r\n              }\r\n              {...buttonProps}\r\n            >\r\n              <Text\r\n                letterSpacing=\"0.075em\"\r\n                size={2}\r\n                css={css`\r\n                  color: white;\r\n                `}\r\n              >\r\n                {isLastQuestionActive ? \"Submit\" : \"Next\"}\r\n              </Text>\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </PageWrapper>\r\n  );\r\n});\r\n","import { Cell, Pie, PieChart } from \"recharts\";\r\n\r\nimport React from \"react\";\r\nimport Text from \"../../components/shared/Text/Text\";\r\nimport { Theme } from \"../../theme\";\r\nimport { useTheme } from \"emotion-theming\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\n\r\nexport type ChartResults = {\r\n  correct: { value: number; hideColor: boolean };\r\n  incorrect: { value: number; hideColor: boolean };\r\n  unanswered: { value: number; hideColor: boolean };\r\n};\r\n\r\nexport interface ChartProps {\r\n  size: number;\r\n  results: ChartResults;\r\n  label?: boolean;\r\n}\r\n\r\nexport default function Chart({ size, results, label }: ChartProps) {\r\n  const theme = useTheme<Theme>();\r\n  const colors = {\r\n    correct: theme.colors.primary,\r\n    incorrect: theme.colors.secondary,\r\n    unanswered: theme.colors.dark,\r\n  };\r\n  const data = Object.entries(results).map(([questionType, values]) => ({\r\n    name: questionType,\r\n    ...values,\r\n    color: colors[questionType],\r\n  }));\r\n\r\n  const { deviceType } = useWindowSize();\r\n\r\n  return (\r\n    <PieChart width={size} height={size}>\r\n      <Pie\r\n        data={data}\r\n        dataKey=\"value\"\r\n        nameKey=\"name\"\r\n        cx=\"50%\"\r\n        cy=\"50%\"\r\n        innerRadius={deviceType === \"default\" ? \"50%\" : \"40%\"}\r\n        outerRadius=\"70%\"\r\n        label={label}\r\n      >\r\n        {data.map(({ name, color, hideColor = false }) => (\r\n          <Cell key={name} fill={hideColor ? theme.colors.light : color} />\r\n        ))}\r\n      </Pie>\r\n    </PieChart>\r\n  );\r\n}\r\n","import Chart, { ChartResults } from \"./Chart\";\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport Grid from \"../../components/shared/Grid/Grid\";\r\nimport PageWrapper from \"../../components/shared/PageWrapper/PageWrapper\";\r\nimport React from \"react\";\r\nimport Text from \"../../components/shared/Text/Text\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\n\r\n// below comment line is required\r\n// it tells babel how to convert properly\r\n/** @jsx jsx */\r\n\r\ninterface ResultProps {}\r\nexport default function Result({ ...otherProps }: ResultProps) {\r\n  const { width: windowWidth, deviceType } = useWindowSize();\r\n\r\n  const getResultData = (\r\n    data: { correct: number; incorrect: number; unanswered: number },\r\n    hide?: { correct?: boolean; incorrect?: boolean; unanswered?: boolean },\r\n  ): ChartResults =>\r\n    Object.entries(data).reduce(\r\n      (acc, [key, value]) => ({\r\n        ...acc,\r\n        [key]: {\r\n          value,\r\n          hideColor: !!hide?.[key],\r\n        },\r\n      }),\r\n      {} as ChartResults,\r\n    );\r\n\r\n  const results = {\r\n    correct: 5,\r\n    incorrect: 1,\r\n    unanswered: 2,\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <Grid\r\n        css={css`\r\n          padding: ${deviceType === \"default\" ? \"2em 1.25em\" : \"2.5em\"};\r\n        `}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid justifyContent=\"center\">\r\n          <Text variant=\"dark\" size={deviceType === \"default\" ? 5 : 6}>\r\n            YOUR RESULTS\r\n          </Text>\r\n        </Grid>\r\n\r\n        <Grid\r\n          css={css`\r\n            align-self: flex-start;\r\n          `}\r\n          justifyContent=\"space-around\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid\r\n            columns={[12, 7, 5]}\r\n            justifyContent=\"center\"\r\n            css={css`\r\n              position: relative;\r\n            `}\r\n          >\r\n            <Chart\r\n              results={getResultData(results)}\r\n              size={Math.min(400, windowWidth * 0.6)}\r\n              label\r\n            />\r\n\r\n            <Text\r\n              variant=\"primary\"\r\n              size={6}\r\n              css={css`\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n              `}\r\n              weight=\"bold\"\r\n            >\r\n              {Math.round(\r\n                (results.correct /\r\n                  (results.correct + results.incorrect + results.unanswered)) *\r\n                  100,\r\n              )}\r\n              %\r\n            </Text>\r\n          </Grid>\r\n\r\n          <Grid columns={[12, 5, 5]}>\r\n            <LegendRow\r\n              results={getResultData(results)}\r\n              type=\"total\"\r\n            ></LegendRow>\r\n\r\n            <LegendRow\r\n              results={getResultData(results, { unanswered: true })}\r\n              type=\"answered\"\r\n            ></LegendRow>\r\n\r\n            <LegendRow\r\n              results={getResultData(results, {\r\n                correct: true,\r\n                incorrect: true,\r\n              })}\r\n              type=\"unanswered\"\r\n            ></LegendRow>\r\n\r\n            <LegendRow\r\n              results={getResultData(results, {\r\n                incorrect: true,\r\n                unanswered: true,\r\n              })}\r\n              type=\"correct\"\r\n            ></LegendRow>\r\n\r\n            <LegendRow\r\n              results={getResultData(results, {\r\n                correct: true,\r\n                unanswered: true,\r\n              })}\r\n              type=\"incorrect\"\r\n            ></LegendRow>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\ninterface LegendRowProps {\r\n  results: ChartResults;\r\n  type: \"total\" | \"answered\" | \"unanswered\" | \"correct\" | \"incorrect\";\r\n}\r\nfunction LegendRow({ results, type }: LegendRowProps) {\r\n  const mapTypeToFields = () => {\r\n    switch (type) {\r\n      case \"total\":\r\n        return {\r\n          title: \"Total questions\",\r\n          value:\r\n            results.correct.value +\r\n            results.incorrect.value +\r\n            results.unanswered.value,\r\n        };\r\n\r\n      case \"answered\":\r\n        return {\r\n          title: \"Answered questions\",\r\n          value: results.correct.value + results.incorrect.value,\r\n        };\r\n\r\n      case \"unanswered\":\r\n        return {\r\n          title: \"Unanswered questions\",\r\n          value: results.unanswered.value,\r\n        };\r\n\r\n      default:\r\n        return {\r\n          title: type[0].toUpperCase() + type.substr(1) + \" answers\",\r\n          value: results[type].value,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { title, value } = mapTypeToFields();\r\n  const { deviceType } = useWindowSize();\r\n  const height = deviceType === \"default\" ? 35 : 45;\r\n\r\n  return (\r\n    <Grid\r\n      css={css`\r\n        padding-bottom: 0.5em;\r\n        flex-wrap: nowrap;\r\n      `}\r\n      alignItems=\"center\"\r\n    >\r\n      <Grid\r\n        columns=\"auto\"\r\n        css={css`\r\n          flex-grow: 1;\r\n          flex-wrap: nowrap;\r\n          padding-right: 5px;\r\n        `}\r\n      >\r\n        <Chart results={results} size={height} />\r\n        <Text size={4} variant=\"dark\" lineHeight={`${height}px`}>\r\n          {title}\r\n        </Text>\r\n      </Grid>\r\n      <Text size={4} variant=\"dark\" align=\"right\" lineHeight={`${height}px`}>\r\n        {value}\r\n      </Text>\r\n    </Grid>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Home from \"./pages/Home/Home\";\r\nimport Quiz from \"./pages/Quiz/Quiz\";\r\nimport Result from \"./pages/Result/Result\";\r\n\r\ninterface RoutesProps {}\r\nexport default function Routes(props: RoutesProps) {\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home}></Route>\r\n        <Route path=\"/quiz\" component={Quiz}></Route>\r\n        <Route path=\"/result\" component={Result}></Route>\r\n        <Redirect to=\"/\"></Redirect>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.scss\";\n\nimport Header from \"./components/Header/Header\";\nimport React from \"react\";\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <Routes></Routes>\n    </>\n  );\n}\n\nexport default App;\n","import \"./index.scss\";\n\nimport * as React from \"react\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { RootActions, RootState, rootReducer } from \"./store\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\n\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"./theme\";\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk as ThunkMiddleware<RootState, RootActions>),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}